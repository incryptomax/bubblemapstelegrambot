const { Markup } = require('telegraf');
const logger = require('../../utils/logger');
const screenshotService = require('../../services/screenshotService');
const quickScreenshotService = require('../../services/quickScreenshotService');
const tokenInfoService = require('../../services/tokenInfoService');
const bubblemapsService = require('../../services/bubblemapsService');
const blockchainService = require('../../services/blockchainService');
const { formatTokenInfo, determineBlockchain } = require('../../utils/tokenUtils');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
async function handleTokenCommand(ctx) {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length === 0) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /token 0x...');
    }
    
    const tokenAddress = args[0].trim();
    let chain = args[1]?.trim() || null;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫—á–µ–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!chain) {
      chain = determineBlockchain(tokenAddress);
      if (!chain) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–æ–∫—á–µ–π–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —è–≤–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /token 0x... ethereum');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫—á–µ–π–Ω
    if (!blockchainService.isChainSupported(chain)) {
      return ctx.reply(`–ë–ª–æ–∫—á–µ–π–Ω ${chain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫—á–µ–π–Ω—ã: ${blockchainService.getSupportedChains().join(', ')}`);
    }
    
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const loadingMessage = await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ ${tokenAddress} –≤ —Å–µ—Ç–∏ ${chain}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    const tokenInfo = await tokenInfoService.getTokenInfo(tokenAddress, chain);
    
    if (!tokenInfo) {
      await ctx.telegram.editMessageText(
        ctx.chat.id, 
        loadingMessage.message_id, 
        null, 
        `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ ${tokenAddress} –≤ —Å–µ—Ç–∏ ${chain}.`
      );
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    const formattedInfo = formatTokenInfo(tokenInfo, chain);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    await ctx.telegram.editMessageText(
      ctx.chat.id, 
      loadingMessage.message_id, 
      null, 
      formattedInfo,
      { 
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('üìä Bubble Map', `bubble_${chain}_${tokenAddress}`),
            Markup.button.callback('‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä', `quick_${chain}_${tokenAddress}`)
          ],
          [
            Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ BubbleMaps', bubblemapsService.generateMapUrl(tokenAddress, chain))
          ]
        ])
      }
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /token: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã token_chain_address –∏–∑ inline-–∫–Ω–æ–ø–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
async function handleTokenInfo(ctx) {
  try {
    const callbackData = ctx.callbackQuery.data;
    const [_, chain, token] = callbackData.split('_');
    
    if (!chain || !token) {
      return ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫—á–µ–π–Ω
    if (!blockchainService.isChainSupported(chain)) {
      return ctx.answerCallbackQuery(`–ë–ª–æ–∫—á–µ–π–Ω ${chain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await ctx.answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ...');
    const loadingMessage = await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ ${token} –≤ —Å–µ—Ç–∏ ${chain}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    const tokenInfo = await tokenInfoService.getTokenInfo(token, chain);
    
    if (!tokenInfo) {
      await ctx.telegram.editMessageText(
        ctx.chat.id, 
        loadingMessage.message_id, 
        null, 
        `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ ${token} –≤ —Å–µ—Ç–∏ ${chain}.`
      );
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    const formattedInfo = formatTokenInfo(tokenInfo, chain);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    await ctx.telegram.editMessageText(
      ctx.chat.id, 
      loadingMessage.message_id, 
      null, 
      formattedInfo,
      { 
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('üìä Bubble Map', `bubble_${chain}_${token}`),
            Markup.button.callback('‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä', `quick_${chain}_${token}`)
          ],
          [
            Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ BubbleMaps', bubblemapsService.generateMapUrl(token, chain))
          ]
        ])
      }
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω-–∏–Ω—Ñ–æ: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Bubble Map
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
async function handleBubbleMap(ctx) {
  try {
    const callbackData = ctx.callbackQuery.data;
    const [_, chain, token] = callbackData.split('_');
    
    if (!chain || !token) {
      return ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫—á–µ–π–Ω
    if (!blockchainService.isChainSupported(chain)) {
      return ctx.answerCallbackQuery(`–ë–ª–æ–∫—á–µ–π–Ω ${chain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await ctx.answerCallbackQuery('–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...');
    const loadingMessage = await ctx.reply('‚è≥ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç Bubble Map... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.');
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    try {
      const screenshot = await screenshotService.captureMapScreenshot(token, chain);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.replyWithPhoto({ source: screenshot }, {
        caption: `üìä Bubble Map –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${token} –≤ —Å–µ—Ç–∏ ${chain}`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ BubbleMaps', url: bubblemapsService.generateMapUrl(token, chain) }
            ]
          ]
        }
      });
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
      await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
    } catch (screenshotError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${screenshotError.message}`);
      
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, —Å–æ–æ–±—â–∞—è –æ–± –æ—à–∏–±–∫–µ
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        loadingMessage.message_id,
        null,
        `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç Bubble Map. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–∞–π—Ç–µ BubbleMaps:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ BubbleMaps', url: bubblemapsService.generateMapUrl(token, chain) }
              ]
            ]
          }
        }
      );
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Bubble Map: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Bubble Map. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Bubble Map
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
async function handleQuickBubbleMap(ctx) {
  try {
    const callbackData = ctx.callbackQuery.data;
    const [_, chain, token] = callbackData.split('_');
    
    if (!chain || !token) {
      return ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫—á–µ–π–Ω
    if (!blockchainService.isChainSupported(chain)) {
      return ctx.answerCallbackQuery(`–ë–ª–æ–∫—á–µ–π–Ω ${chain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    
    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await ctx.answerCallbackQuery('–°–æ–∑–¥–∞—é –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç...');
    const loadingMessage = await ctx.reply('‚è≥ –°–æ–∑–¥–∞—é –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç Bubble Map... –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥.');
    
    // –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    const screenshot = await quickScreenshotService.captureQuickScreenshot(token, chain);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithPhoto({ source: screenshot }, {
      caption: `üìä Bubble Map –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${token} –≤ —Å–µ—Ç–∏ ${chain} (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: `bubble_${chain}_${token}` },
            { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ BubbleMaps', url: bubblemapsService.generateMapUrl(token, chain) }
          ]
        ]
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  handleTokenCommand,
  handleTokenInfo,
  handleBubbleMap,
  handleQuickBubbleMap
}; 